
/*Détail for one block*/

var size;
var mag,magOut;

var kC,kT;

//FFT size
size = 16 << 1;
"numFrames : %\n\n ".postf(size);

//Array In of amplitudes for each bin
mag = Array.fill(size,{1.0.rand});
"ampIn : \n %\n\n ".postf(mag.cs);

//Array Out
magOut = Array.newClear(size);


////////////////////////////////////////////////
//***Point of Inversion***
//( FOND = SAMPLERATE / WINDOWSIZE )
kC = 6;
//( bin index  = kC - 1 )
//variant : kC = sqrt( kC * ( kC + 1 ) );
////////////////////////////////////////////////

////////////////////////////////////////////////
//***Point of Transposition***
//(if (kC == kT) -> No Transposition )
kT = 6;
//variant : kT = sqrt( kT * ( kT + 1 ) );
////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////

"*Point d'Inversion : % - Point de Transposition : % \n\ndétail: \n ".postf(kC,kT);

////////////////////////////////////////////////////////////////////////////////////////////////


size.do { arg bin;

	var binInv;
	var k = bin + 1, ki;

	//variant : k = sqrt( k * ( k+1 ) );

	/***Transfert***/
	ki = kC * kT / k;  //distrN variant -> ki = k;

	ki = ki.abs;
	ki = ( size / ki ).round.max(1);
	ki = ( size / ( size / ki ).round ).round;

	binInv = ki - 1;
	( k: (k -> ki), bin: (bin ->binInv), value: (mag[bin]->mag[binInv]) ).postln;

	magOut[bin] = mag[binInv]

};


"\n>>ampOut :".postln;

magOut.cs;


/*

numFrames : 32

 ampIn :
 [ 0.038974642753601, 0.97452414035797, 0.86631953716278, 0.16717743873596, 0.44044673442841, 0.72303712368011, 0.15372443199158, 0.7413033246994, 0.86780762672424, 0.15692508220673, 0.75052464008331, 0.087159633636475, 0.16020798683167, 0.15234231948853, 0.62468075752258, 0.97204279899597, 0.095603704452515, 0.67042517662048, 0.77621352672577, 0.30779600143433, 0.027955651283264, 0.39496004581451, 0.039406895637512, 0.25634384155273, 0.29580962657928, 0.37359702587128, 0.052321195602417, 0.96053040027618, 0.8913209438324, 0.34214520454407, 0.20628750324249, 0.75366830825806 ]

 *Point d'Inversion : 6 - Point de Transposition : 6

détail:
 ( 'k': (1 -> 1.0), 'bin': (0 -> 0.0), 'value': (0.038974642753601 -> 0.038974642753601) )
( 'k': (2 -> 2.0), 'bin': (1 -> 1.0), 'value': (0.97452414035797 -> 0.97452414035797) )
( 'k': (3 -> 3.0), 'bin': (2 -> 2.0), 'value': (0.86631953716278 -> 0.86631953716278) )
( 'k': (4 -> 4.0), 'bin': (3 -> 3.0), 'value': (0.16717743873596 -> 0.16717743873596) )
( 'k': (5 -> 4.0), 'bin': (4 -> 3.0), 'value': (0.44044673442841 -> 0.16717743873596) )
( 'k': (6 -> 5.0), 'bin': (5 -> 4.0), 'value': (0.72303712368011 -> 0.44044673442841) )
( 'k': (7 -> 6.0), 'bin': (6 -> 5.0), 'value': (0.15372443199158 -> 0.72303712368011) )
( 'k': (8 -> 6.0), 'bin': (7 -> 5.0), 'value': (0.7413033246994 -> 0.72303712368011) )
( 'k': (9 -> 8.0), 'bin': (8 -> 7.0), 'value': (0.86780762672424 -> 0.7413033246994) )
( 'k': (10 -> 8.0), 'bin': (9 -> 7.0), 'value': (0.15692508220673 -> 0.7413033246994) )
( 'k': (11 -> 11.0), 'bin': (10 -> 10.0), 'value': (0.75052464008331 -> 0.75052464008331) )
( 'k': (12 -> 11.0), 'bin': (11 -> 10.0), 'value': (0.087159633636475 -> 0.75052464008331) )
( 'k': (13 -> 11.0), 'bin': (12 -> 10.0), 'value': (0.16020798683167 -> 0.75052464008331) )
( 'k': (14 -> 11.0), 'bin': (13 -> 10.0), 'value': (0.15234231948853 -> 0.75052464008331) )
( 'k': (15 -> 16.0), 'bin': (14 -> 15.0), 'value': (0.62468075752258 -> 0.97204279899597) )
( 'k': (16 -> 16.0), 'bin': (15 -> 15.0), 'value': (0.97204279899597 -> 0.97204279899597) )
( 'k': (17 -> 16.0), 'bin': (16 -> 15.0), 'value': (0.095603704452515 -> 0.97204279899597) )
( 'k': (18 -> 16.0), 'bin': (17 -> 15.0), 'value': (0.67042517662048 -> 0.97204279899597) )
( 'k': (19 -> 16.0), 'bin': (18 -> 15.0), 'value': (0.77621352672577 -> 0.97204279899597) )
( 'k': (20 -> 16.0), 'bin': (19 -> 15.0), 'value': (0.30779600143433 -> 0.97204279899597) )
( 'k': (21 -> 16.0), 'bin': (20 -> 15.0), 'value': (0.027955651283264 -> 0.97204279899597) )
( 'k': (22 -> 16.0), 'bin': (21 -> 15.0), 'value': (0.39496004581451 -> 0.97204279899597) )
( 'k': (23 -> 16.0), 'bin': (22 -> 15.0), 'value': (0.039406895637512 -> 0.97204279899597) )
( 'k': (24 -> 16.0), 'bin': (23 -> 15.0), 'value': (0.25634384155273 -> 0.97204279899597) )
( 'k': (25 -> 32.0), 'bin': (24 -> 31.0), 'value': (0.29580962657928 -> 0.75366830825806) )
( 'k': (26 -> 32.0), 'bin': (25 -> 31.0), 'value': (0.37359702587128 -> 0.75366830825806) )
( 'k': (27 -> 32.0), 'bin': (26 -> 31.0), 'value': (0.052321195602417 -> 0.75366830825806) )
( 'k': (28 -> 32.0), 'bin': (27 -> 31.0), 'value': (0.96053040027618 -> 0.75366830825806) )
( 'k': (29 -> 32.0), 'bin': (28 -> 31.0), 'value': (0.8913209438324 -> 0.75366830825806) )
( 'k': (30 -> 32.0), 'bin': (29 -> 31.0), 'value': (0.34214520454407 -> 0.75366830825806) )
( 'k': (31 -> 32.0), 'bin': (30 -> 31.0), 'value': (0.20628750324249 -> 0.75366830825806) )
( 'k': (32 -> 32.0), 'bin': (31 -> 31.0), 'value': (0.75366830825806 -> 0.75366830825806) )

>>ampOut :
-> [ 0.038974642753601, 0.97452414035797, 0.86631953716278, 0.16717743873596, 0.16717743873596, 0.44044673442841, 0.72303712368011, 0.72303712368011, 0.7413033246994, 0.7413033246994, 0.75052464008331, 0.75052464008331, 0.75052464008331, 0.75052464008331, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.97204279899597, 0.75366830825806, 0.75366830825806, 0.75366830825806, 0.75366830825806, 0.75366830825806, 0.75366830825806, 0.75366830825806, 0.75366830825806 ]*/
